{"ast":null,"code":"var _jsxFileName = \"/home/jenmaru/hexletproject/frontend-project-12/frontend/src/contexts/chatContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useMemo, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as messagesActions } from '../slices/Messages.js';\nimport { actions as channelsActions } from '../slices/Channels.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext({});\nconst ChatProvider = ({\n  socket,\n  children\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    socket.on('newMessage', message => {\n      dispatch(messagesActions.addMessage(message));\n    });\n    socket.on('newChannel', channel => {\n      dispatch(channelsActions.addChannel(channel));\n      dispatch(channelsActions.setChannelId(channel.id));\n    });\n    socket.on('removeChannel', payload => {\n      dispatch(channelsActions.removeChannel(payload.id));\n    });\n    socket.on('renameChannel', payload => {\n      dispatch(channelsActions.renameChannel({\n        id: payload.id,\n        changes: payload\n      }));\n    });\n  });\n  const sendNewMessage = useCallback(message => new Promise((resolve, reject) => {\n    socket.timeout(5000).emit('newMessage', message, (err, response) => {\n      if ((response === null || response === void 0 ? void 0 : response.status) === 'ok') {\n        resolve(response);\n      } else {\n        reject(err);\n      }\n    });\n  }), [socket]);\n  const createChannel = useCallback(name => new Promise((resolve, reject) => {\n    socket.timeout(3000).emit('newChannel', {\n      name\n    }, (err, response) => {\n      if ((response === null || response === void 0 ? void 0 : response.status) === 'ok') {\n        resolve(response);\n      } else {\n        reject(err);\n      }\n    });\n  }), [socket]);\n  const removeChannel = useCallback(id => new Promise((resolve, reject) => {\n    socket.timeout(5000).emit('removeChannel', {\n      id\n    }, (err, response) => {\n      if ((response === null || response === void 0 ? void 0 : response.status) === 'ok') {\n        resolve(response);\n      } else {\n        reject(err);\n      }\n    });\n  }), [socket]);\n  const renameChannel = useCallback((id, name) => new Promise((resolve, reject) => {\n    socket.timeout(5000).emit('renameChannel', {\n      id,\n      name\n    }, (err, response) => {\n      if ((response === null || response === void 0 ? void 0 : response.status) === 'ok') {\n        resolve(response);\n      } else {\n        reject(err);\n      }\n    });\n  }), [socket]);\n  const value = useMemo(() => ({\n    sendNewMessage,\n    createChannel,\n    removeChannel,\n    renameChannel\n  }), [createChannel, removeChannel, renameChannel, sendNewMessage]);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"UQLO+nBUI7T6hH1TRrHNtiHHKCc=\", false, function () {\n  return [useDispatch];\n});\n_c = ChatProvider;\nexport { ChatProvider };\nexport default ChatContext;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["createContext","useMemo","useEffect","useCallback","useDispatch","actions","messagesActions","channelsActions","jsxDEV","_jsxDEV","ChatContext","ChatProvider","socket","children","_s","dispatch","on","message","addMessage","channel","addChannel","setChannelId","id","payload","removeChannel","renameChannel","changes","sendNewMessage","Promise","resolve","reject","timeout","emit","err","response","status","createChannel","name","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jenmaru/hexletproject/frontend-project-12/frontend/src/contexts/chatContext.jsx"],"sourcesContent":["import {\n  createContext, useMemo, useEffect, useCallback,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as messagesActions } from '../slices/Messages.js';\nimport { actions as channelsActions } from '../slices/Channels.js';\n\nconst ChatContext = createContext({});\n\nconst ChatProvider = ({ socket, children }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    socket.on('newMessage', (message) => {\n      dispatch(messagesActions.addMessage(message));\n    });\n\n    socket.on('newChannel', (channel) => {\n      dispatch(channelsActions.addChannel(channel));\n      dispatch(channelsActions.setChannelId(channel.id));\n    });\n\n    socket.on('removeChannel', (payload) => {\n      dispatch(channelsActions.removeChannel(payload.id));\n    });\n\n    socket.on('renameChannel', (payload) => {\n      dispatch(channelsActions.renameChannel({ id: payload.id, changes: payload }));\n    });\n  });\n\n  const sendNewMessage = useCallback(\n    (message) => (new Promise((resolve, reject) => {\n      socket.timeout(5000).emit('newMessage', message, (err, response) => {\n        if (response?.status === 'ok') {\n          resolve(response);\n        } else {\n          reject(err);\n        }\n      });\n    })),\n    [socket],\n  );\n\n  const createChannel = useCallback(\n    (name) => (new Promise((resolve, reject) => {\n      socket.timeout(3000).emit('newChannel', { name }, (err, response) => {\n        if (response?.status === 'ok') {\n          resolve(response);\n        } else {\n          reject(err);\n        }\n      });\n    })),\n    [socket],\n  );\n\n  const removeChannel = useCallback(\n    (id) => (new Promise((resolve, reject) => {\n      socket.timeout(5000).emit('removeChannel', { id }, (err, response) => {\n        if (response?.status === 'ok') {\n          resolve(response);\n        } else {\n          reject(err);\n        }\n      });\n    })),\n    [socket],\n  );\n\n  const renameChannel = useCallback(\n    (id, name) => (new Promise((resolve, reject) => {\n      socket.timeout(5000).emit('renameChannel', { id, name }, (err, response) => {\n        if (response?.status === 'ok') {\n          resolve(response);\n        } else {\n          reject(err);\n        }\n      });\n    })),\n    [socket],\n  );\n\n  const value = useMemo(() => ({\n    sendNewMessage,\n    createChannel,\n    removeChannel,\n    renameChannel,\n  }), [createChannel, removeChannel, renameChannel, sendNewMessage]);\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport { ChatProvider };\nexport default ChatContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}