{"ast":null,"code":"var _jsxFileName = \"/home/jenmaru/myProject/closerties/src/components/Buttons.jsx\",\n  _s = $RefreshSig$();\nimport { useState, useEffect } from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport { useDispatch } from 'react-redux';\nimport { actions as modalAction } from '../slices/Modals.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ButtonsLink = () => {\n  _s();\n  const dispatch = useDispatch();\n  const [radioValue, setRadioValue] = useState('1');\n  const gallery = () => {\n    dispatch(modalAction.openModal({\n      type: 'gallery'\n    }));\n  };\n  const radios = [{\n    name: 'Главная',\n    value: '1'\n  }, {\n    name: 'История мира',\n    value: '2'\n  }, {\n    name: 'Галерея',\n    value: '3'\n  }, {\n    name: 'Скачать билд',\n    value: '4'\n  }, {\n    name: 'Помощь проекту',\n    value: '5'\n  }];\n  useEffect(() => {\n    dispatch(modalAction.openModal({\n      type: 'main'\n    }));\n  });\n  return /*#__PURE__*/_jsxDEV(ButtonGroup, {\n    children: radios.map((radio, idx) => /*#__PURE__*/_jsxDEV(ToggleButton, {\n      id: `radio-${idx}`,\n      type: \"radio\",\n      name: \"radio\",\n      variant: \"transparent\",\n      value: radio.value,\n      checked: radioValue === radio.value,\n      onChange: e => setRadioValue(e.currentTarget.value),\n      className: radioValue === radio.value ? 'text-danger' : 'text-white',\n      style: {\n        opacity: '1'\n      },\n      children: radio.name\n    }, `${radio.value}`, false, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 28,\n    columnNumber: 5\n  }, this);\n};\n_s(ButtonsLink, \"O95lqJ+lWyHGQUeFXdeMyIRkXkY=\", false, function () {\n  return [useDispatch];\n});\n_c = ButtonsLink;\nexport default ButtonsLink;\nvar _c;\n$RefreshReg$(_c, \"ButtonsLink\");","map":{"version":3,"names":["useState","useEffect","ButtonGroup","ToggleButton","useDispatch","actions","modalAction","jsxDEV","_jsxDEV","ButtonsLink","_s","dispatch","radioValue","setRadioValue","gallery","openModal","type","radios","name","value","children","map","radio","idx","id","variant","checked","onChange","e","currentTarget","className","style","opacity","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jenmaru/myProject/closerties/src/components/Buttons.jsx"],"sourcesContent":["import { useState, useEffect } from 'react';\nimport ButtonGroup from 'react-bootstrap/ButtonGroup';\nimport ToggleButton from 'react-bootstrap/ToggleButton';\nimport { useDispatch } from 'react-redux';\nimport { actions as modalAction } from '../slices/Modals.js';\n\nconst ButtonsLink = () => {\n  const dispatch = useDispatch();\n  const [radioValue, setRadioValue] = useState('1');\n\n  const gallery = () => {\n    dispatch(modalAction.openModal({ type: 'gallery' }));\n  };\n\n  const radios = [\n    { name: 'Главная', value: '1' },\n    { name: 'История мира', value: '2' },\n    { name: 'Галерея', value: '3' },\n    { name: 'Скачать билд', value: '4' },\n    { name: 'Помощь проекту', value: '5' },\n  ];\n\n  useEffect(() => {\n    dispatch(modalAction.openModal({ type: 'main' }));\n  });\n\n  return (\n    <ButtonGroup>\n      {radios.map((radio, idx) => (\n        <ToggleButton\n          key={`${radio.value}`}\n          id={`radio-${idx}`}\n          type=\"radio\"\n          name=\"radio\"\n          variant=\"transparent\"\n          value={radio.value}\n          checked={radioValue === radio.value}\n          onChange={(e) => setRadioValue(e.currentTarget.value)}\n          className={radioValue === radio.value ? 'text-danger' : 'text-white'}\n          style={{ opacity: '1' }}\n        >\n          {radio.name}\n        </ToggleButton>\n      ))}\n    </ButtonGroup>\n  );\n};\n\nexport default ButtonsLink;\n"],"mappings":";;AAAA,SAASA,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAC3C,OAAOC,WAAW,MAAM,6BAA6B;AACrD,OAAOC,YAAY,MAAM,8BAA8B;AACvD,SAASC,WAAW,QAAQ,aAAa;AACzC,SAASC,OAAO,IAAIC,WAAW,QAAQ,qBAAqB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7D,MAAMC,WAAW,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACxB,MAAMC,QAAQ,GAAGP,WAAW,CAAC,CAAC;EAC9B,MAAM,CAACQ,UAAU,EAAEC,aAAa,CAAC,GAAGb,QAAQ,CAAC,GAAG,CAAC;EAEjD,MAAMc,OAAO,GAAGA,CAAA,KAAM;IACpBH,QAAQ,CAACL,WAAW,CAACS,SAAS,CAAC;MAAEC,IAAI,EAAE;IAAU,CAAC,CAAC,CAAC;EACtD,CAAC;EAED,MAAMC,MAAM,GAAG,CACb;IAAEC,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAI,CAAC,EAC/B;IAAED,IAAI,EAAE,cAAc;IAAEC,KAAK,EAAE;EAAI,CAAC,EACpC;IAAED,IAAI,EAAE,SAAS;IAAEC,KAAK,EAAE;EAAI,CAAC,EAC/B;IAAED,IAAI,EAAE,cAAc;IAAEC,KAAK,EAAE;EAAI,CAAC,EACpC;IAAED,IAAI,EAAE,gBAAgB;IAAEC,KAAK,EAAE;EAAI,CAAC,CACvC;EAEDlB,SAAS,CAAC,MAAM;IACdU,QAAQ,CAACL,WAAW,CAACS,SAAS,CAAC;MAAEC,IAAI,EAAE;IAAO,CAAC,CAAC,CAAC;EACnD,CAAC,CAAC;EAEF,oBACER,OAAA,CAACN,WAAW;IAAAkB,QAAA,EACTH,MAAM,CAACI,GAAG,CAAC,CAACC,KAAK,EAAEC,GAAG,kBACrBf,OAAA,CAACL,YAAY;MAEXqB,EAAE,EAAG,SAAQD,GAAI,EAAE;MACnBP,IAAI,EAAC,OAAO;MACZE,IAAI,EAAC,OAAO;MACZO,OAAO,EAAC,aAAa;MACrBN,KAAK,EAAEG,KAAK,CAACH,KAAM;MACnBO,OAAO,EAAEd,UAAU,KAAKU,KAAK,CAACH,KAAM;MACpCQ,QAAQ,EAAGC,CAAC,IAAKf,aAAa,CAACe,CAAC,CAACC,aAAa,CAACV,KAAK,CAAE;MACtDW,SAAS,EAAElB,UAAU,KAAKU,KAAK,CAACH,KAAK,GAAG,aAAa,GAAG,YAAa;MACrEY,KAAK,EAAE;QAAEC,OAAO,EAAE;MAAI,CAAE;MAAAZ,QAAA,EAEvBE,KAAK,CAACJ;IAAI,GAXL,GAAEI,KAAK,CAACH,KAAM,EAAC;MAAAc,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAYT,CACf;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACS,CAAC;AAElB,CAAC;AAAC1B,EAAA,CAxCID,WAAW;EAAA,QACEL,WAAW;AAAA;AAAAiC,EAAA,GADxB5B,WAAW;AA0CjB,eAAeA,WAAW;AAAC,IAAA4B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}