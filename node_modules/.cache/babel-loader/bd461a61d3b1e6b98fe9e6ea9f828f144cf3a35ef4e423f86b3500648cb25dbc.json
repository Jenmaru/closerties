{"ast":null,"code":"import { a as _typeof } from './_rollupPluginBabelHelpers-b1794394.js';\nimport Rollbar from 'rollbar';\nimport { i as invariant } from './tiny-invariant.esm-c1395f98.js';\nfunction historyContext(rollbar) {\n  var _ref = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n    formatter = _ref.formatter,\n    filter = _ref.filter;\n  invariant(rollbar instanceof Rollbar, 'historyContext must have an instance of Rollbar');\n  invariant(formatter == null || typeof formatter === 'function', \"formatter option must be a function, received \".concat(_typeof(formatter), \" instead\"));\n  invariant(filter == null || typeof filter === 'function', \"filter option must be a function, received \".concat(_typeof(filter), \" instead\")); // v4 of history.listen callback signature is (location, action)\n  // v5 of history.listen callback signature is ({ location, action })\n  // this implementation translates it to work for both\n\n  return function (v4location, v4action) {\n    var action = v4location.action,\n      location = v4location.location;\n    if (v4action) {\n      action = v4action;\n      location = v4location;\n    }\n    if (filter && !filter(location, action)) {\n      return;\n    }\n    var context = formatter ? formatter(location, action) : location.pathname;\n    invariant(typeof context === 'string', 'formatter must return a string value to set the context');\n    rollbar.configure({\n      payload: {\n        context: context\n      }\n    });\n  };\n}\nexport { historyContext };","map":{"version":3,"names":["historyContext","rollbar","_ref","arguments","length","undefined","formatter","filter","invariant","Rollbar","concat","_typeof","v4location","v4action","action","location","context","pathname","configure","payload"],"sources":["/home/jenmaru/hexletproject/frontend-project-12/frontend/node_modules/@rollbar/react/src/history-context.js"],"sourcesContent":["import Rollbar from 'rollbar';\nimport invariant from 'tiny-invariant';\n\nexport function historyContext(rollbar, { formatter, filter } = {}) {\n  invariant(rollbar instanceof Rollbar, 'historyContext must have an instance of Rollbar');\n  invariant(formatter == null || typeof formatter === 'function', `formatter option must be a function, received ${typeof formatter} instead`);\n  invariant(filter == null || typeof filter === 'function', `filter option must be a function, received ${typeof filter} instead`);\n  // v4 of history.listen callback signature is (location, action)\n  // v5 of history.listen callback signature is ({ location, action })\n  // this implementation translates it to work for both\n  return (v4location, v4action) => {\n    let  { action, location } = v4location;\n    if (v4action) {\n      action = v4action;\n      location = v4location;\n    }\n    if (filter && !filter(location, action)) {\n      return;\n    }\n    const context = formatter ? formatter(location, action) : location.pathname;\n    invariant(typeof context === 'string', 'formatter must return a string value to set the context');\n    rollbar.configure({ payload: { context }});\n  }\n}\n"],"mappings":";;;AAGO,SAASA,cAATA,CAAwBC,OAAxB,EAA6D;EAAA,IAAAC,IAAA,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAJ,EAAI;IAA1BG,SAA0B,GAAAJ,IAAA,CAA1BI,SAA0B;IAAfC,MAAe,GAAAL,IAAA,CAAfK,MAAe;EAClEC,SAAS,CAACP,OAAO,YAAYQ,OAApB,EAA6B,iDAA7B,CAAT;EACAD,SAAS,CAACF,SAAS,IAAI,IAAb,IAAqB,OAAOA,SAAP,KAAqB,UAA3C,mDAAAI,MAAA,CAAAC,OAAA,CAA+GL,SAA/G,eAAT;EACAE,SAAS,CAACD,MAAM,IAAI,IAAV,IAAkB,OAAOA,MAAP,KAAkB,UAArC,gDAAAG,MAAA,CAAAC,OAAA,CAAsGJ,MAAtG,eAAT,CAHkE;EAKlE;EACA;;EACA,OAAO,UAACK,UAAD,EAAaC,QAAb,EAA0B;IAC/B,IAAOC,MAAP,GAA4BF,UAA5B,CAAOE,MAAP;MAAeC,QAAf,GAA4BH,UAA5B,CAAeG,QAAf;IACA,IAAIF,QAAJ,EAAc;MACZC,MAAM,GAAGD,QAAT;MACAE,QAAQ,GAAGH,UAAX;IACD;IACD,IAAIL,MAAM,IAAI,CAACA,MAAM,CAACQ,QAAD,EAAWD,MAAX,CAArB,EAAyC;MACvC;IACD;IACD,IAAME,OAAO,GAAGV,SAAS,GAAGA,SAAS,CAACS,QAAD,EAAWD,MAAX,CAAZ,GAAiCC,QAAQ,CAACE,QAAnE;IACAT,SAAS,CAAC,OAAOQ,OAAP,KAAmB,QAApB,EAA8B,yDAA9B,CAAT;IACAf,OAAO,CAACiB,SAAR,CAAkB;MAAEC,OAAO,EAAE;QAAEH,OAAO,EAAPA;MAAF;IAAX,CAAlB;EACD,CAZD;AAaD"},"metadata":{},"sourceType":"module","externalDependencies":[]}