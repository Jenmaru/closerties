{"ast":null,"code":"var _jsxFileName = \"/home/jenmaru/hexletproject/frontend-project-12/frontend/src/contexts/chatContext.jsx\",\n  _s = $RefreshSig$();\nimport { createContext, useMemo, useEffect, useCallback } from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as messagesActions } from '../slices/Messages.js';\nimport { actions as channelsActions } from '../slices/Channels.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst ChatContext = /*#__PURE__*/createContext({});\nconst ChatProvider = ({\n  socket,\n  children\n}) => {\n  _s();\n  const dispatch = useDispatch();\n  useEffect(() => {\n    socket.on('newMessage', message => {\n      dispatch(messagesActions.addMessage(message));\n    });\n    socket.on('newChannel', channel => {\n      dispatch(channelsActions.addChannel(channel));\n    });\n    socket.on('removeChannel', payload => {\n      dispatch(channelsActions.removeChannel(payload.id));\n    });\n    socket.on('renameChannel', payload => {\n      dispatch(channelsActions.renameChannel({\n        id: payload.id,\n        changes: payload\n      }));\n    });\n  });\n  const sendNewMessage = async message => {\n    await new Promise((resolve, reject) => {\n      socket.timeout(5000).emit('newMessage', message, (err, response) => {\n        if ((response === null || response === void 0 ? void 0 : response.status) === 'ok') {\n          resolve(response);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  };\n  const createChannel = useCallback(async name => {\n    await new Promise((resolve, reject) => {\n      const result = socket.timeout(3000).emitWithAck('newChannel', {\n        name\n      });\n      if ((result === null || result === void 0 ? void 0 : result.status) === 'ok') {\n        dispatch(channelsActions.setChannelId(result.data.id));\n        resolve(result);\n        console.log(result);\n        console.log(resolve(result));\n      } else {\n        reject(result);\n      }\n    });\n  }, [dispatch, socket]);\n  const removeChannel = async id => {\n    await new Promise((resolve, reject) => {\n      socket.timeout(5000).emit('removeChannel', {\n        id\n      }, (err, response) => {\n        if ((response === null || response === void 0 ? void 0 : response.status) === 'ok') {\n          resolve(response);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  };\n  const renameChannel = async (id, name) => {\n    await new Promise((resolve, reject) => {\n      socket.timeout(5000).emit('renameChannel', {\n        id,\n        name\n      }, (err, response) => {\n        if ((response === null || response === void 0 ? void 0 : response.status) === 'ok') {\n          resolve(response);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  };\n  const value = useMemo(() => ({\n    sendNewMessage,\n    createChannel,\n    removeChannel,\n    renameChannel\n  }), [createChannel, removeChannel, renameChannel, sendNewMessage]);\n  return /*#__PURE__*/_jsxDEV(ChatContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 5\n  }, this);\n};\n_s(ChatProvider, \"8iegsPxHV6krBR7B6o3sbvaz7Qk=\", false, function () {\n  return [useDispatch];\n});\n_c = ChatProvider;\nexport { ChatProvider };\nexport default ChatContext;\nvar _c;\n$RefreshReg$(_c, \"ChatProvider\");","map":{"version":3,"names":["createContext","useMemo","useEffect","useCallback","useDispatch","actions","messagesActions","channelsActions","jsxDEV","_jsxDEV","ChatContext","ChatProvider","socket","children","_s","dispatch","on","message","addMessage","channel","addChannel","payload","removeChannel","id","renameChannel","changes","sendNewMessage","Promise","resolve","reject","timeout","emit","err","response","status","createChannel","name","result","emitWithAck","setChannelId","data","console","log","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/jenmaru/hexletproject/frontend-project-12/frontend/src/contexts/chatContext.jsx"],"sourcesContent":["import {\n  createContext, useMemo, useEffect, useCallback,\n} from 'react';\nimport { useDispatch } from 'react-redux';\nimport { actions as messagesActions } from '../slices/Messages.js';\nimport { actions as channelsActions } from '../slices/Channels.js';\n\nconst ChatContext = createContext({});\n\nconst ChatProvider = ({ socket, children }) => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    socket.on('newMessage', (message) => {\n      dispatch(messagesActions.addMessage(message));\n    });\n\n    socket.on('newChannel', (channel) => {\n      dispatch(channelsActions.addChannel(channel));\n    });\n\n    socket.on('removeChannel', (payload) => {\n      dispatch(channelsActions.removeChannel(payload.id));\n    });\n\n    socket.on('renameChannel', (payload) => {\n      dispatch(channelsActions.renameChannel({ id: payload.id, changes: payload }));\n    });\n  });\n\n  const sendNewMessage = async (message) => {\n    await new Promise((resolve, reject) => {\n      socket.timeout(5000).emit('newMessage', message, (err, response) => {\n        if (response?.status === 'ok') {\n          resolve(response);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  };\n\n  const createChannel = useCallback(\n    async (name) => {\n      await new Promise((resolve, reject) => {\n        const result = socket.timeout(3000).emitWithAck('newChannel', { name });\n        if (result?.status === 'ok') {\n          dispatch(channelsActions.setChannelId(result.data.id));\n          resolve(result);\n          console.log(result);\n          console.log(resolve(result));\n        } else {\n          reject(result);\n        }\n      });\n    },\n    [dispatch, socket],\n  );\n\n  const removeChannel = async (id) => {\n    await new Promise((resolve, reject) => {\n      socket.timeout(5000).emit('removeChannel', { id }, (err, response) => {\n        if (response?.status === 'ok') {\n          resolve(response);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  };\n\n  const renameChannel = async (id, name) => {\n    await new Promise((resolve, reject) => {\n      socket.timeout(5000).emit('renameChannel', { id, name }, (err, response) => {\n        if (response?.status === 'ok') {\n          resolve(response);\n        } else {\n          reject(err);\n        }\n      });\n    });\n  };\n\n  const value = useMemo(() => ({\n    sendNewMessage,\n    createChannel,\n    removeChannel,\n    renameChannel,\n  }), [createChannel, removeChannel, renameChannel, sendNewMessage]);\n\n  return (\n    <ChatContext.Provider value={value}>\n      {children}\n    </ChatContext.Provider>\n  );\n};\n\nexport { ChatProvider };\nexport default ChatContext;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}