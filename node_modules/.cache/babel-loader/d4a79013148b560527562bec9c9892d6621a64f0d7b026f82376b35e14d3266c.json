{"ast":null,"code":"import { i as invariant } from './tiny-invariant.esm-c1395f98.js';\nimport { useLayoutEffect, useEffect } from 'react';\nimport { useRollbar } from './useRollbar.js';\nimport './provider-df81bf5c.js';\nimport './_rollupPluginBabelHelpers-b1794394.js';\nimport 'prop-types';\nimport 'rollbar';\nimport './constant.js';\n\n// export function useRollbarContext(context) {\n//   useRollbarConfiguration({ payload: { context }});\n// }\n// Complex version will set the context when part of the tree and reset back to original context when removed\n\nfunction useRollbarContext() {\n  var ctx = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';\n  var isLayout = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  invariant(typeof ctx === 'string', '`ctx` must be a string');\n  var rollbar = useRollbar();\n  (isLayout ? useLayoutEffect : useEffect)(function () {\n    var origCtx = rollbar.options.payload.context;\n    rollbar.configure({\n      payload: {\n        context: ctx\n      }\n    });\n    return function () {\n      rollbar.configure({\n        payload: {\n          context: origCtx\n        }\n      });\n    };\n  }, [ctx]);\n}\nexport { useRollbarContext };","map":{"version":3,"names":["useRollbarContext","ctx","arguments","length","undefined","isLayout","invariant","rollbar","useRollbar","useLayoutEffect","useEffect","origCtx","options","payload","context","configure"],"sources":["/home/jenmaru/myProject/closerties/node_modules/@rollbar/react/src/hooks/use-rollbar-context.js"],"sourcesContent":["import invariant from 'tiny-invariant';\nimport { useEffect, useLayoutEffect } from 'react';\nimport { useRollbar } from './use-rollbar';\n\n// Simple version does its job\n// export function useRollbarContext(context) {\n//   useRollbarConfiguration({ payload: { context }});\n// }\n\n// Complex version will set the context when part of the tree and reset back to original context when removed\nexport function useRollbarContext(ctx = '', isLayout = false) {\n  invariant(typeof ctx === 'string', '`ctx` must be a string');\n  const rollbar = useRollbar();\n  (isLayout ? useLayoutEffect : useEffect)(() => {\n    const origCtx = rollbar.options.payload.context;\n    rollbar.configure({ payload: { context: ctx }});\n    return () => {\n      rollbar.configure({ payload: { context: origCtx }});\n    };\n  }, [ctx]);\n}\n"],"mappings":";;;;;;;;;AAKA;AACA;AACA;AAEA;;AACO,SAASA,iBAATA,CAAA,EAAuD;EAAA,IAA5BC,GAA4B,GAAAC,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAtB,EAAsB;EAAA,IAAlBG,QAAkB,GAAAH,SAAA,CAAAC,MAAA,QAAAD,SAAA,QAAAE,SAAA,GAAAF,SAAA,MAAP,KAAO;EAC5DI,SAAS,CAAC,OAAOL,GAAP,KAAe,QAAhB,EAA0B,wBAA1B,CAAT;EACA,IAAMM,OAAO,GAAGC,UAAU,EAA1B;EACA,CAACH,QAAQ,GAAGI,eAAH,GAAqBC,SAA9B,EAAyC,YAAM;IAC7C,IAAMC,OAAO,GAAGJ,OAAO,CAACK,OAAR,CAAgBC,OAAhB,CAAwBC,OAAxC;IACAP,OAAO,CAACQ,SAAR,CAAkB;MAAEF,OAAO,EAAE;QAAEC,OAAO,EAAEb;MAAX;IAAX,CAAlB;IACA,OAAO,YAAM;MACXM,OAAO,CAACQ,SAAR,CAAkB;QAAEF,OAAO,EAAE;UAAEC,OAAO,EAAEH;QAAX;MAAX,CAAlB;IACD,CAFD;EAGD,CAND,EAMG,CAACV,GAAD,CANH;AAOD"},"metadata":{},"sourceType":"module","externalDependencies":[]}