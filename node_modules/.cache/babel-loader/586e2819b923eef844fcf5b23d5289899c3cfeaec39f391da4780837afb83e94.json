{"ast":null,"code":"import{createSlice,createEntityAdapter}from'@reduxjs/toolkit';import{actions as channelsActions}from'./Channels.js';const messagesAdapter=createEntityAdapter();const initialState=messagesAdapter.getInitialState();const messages=createSlice({name:'messages',initialState,reducers:{addMessage:messagesAdapter.addOne,addMessages:messagesAdapter.addMany},extraReducers:builder=>{builder.addCase(channelsActions.removeChannel,(state,action)=>{const{channelId}=action.payload;const update=Object.values(state.entities).filter(e=>e.channelId!==channelId);messagesAdapter.setAll(state,update);});}});export const{actions}=messages;export const selectors=messagesAdapter.getSelectors(state=>state.messages);export default messages.reducer;","map":{"version":3,"names":["createSlice","createEntityAdapter","actions","channelsActions","messagesAdapter","initialState","getInitialState","messages","name","reducers","addMessage","addOne","addMessages","addMany","extraReducers","builder","addCase","removeChannel","state","action","channelId","payload","update","Object","values","entities","filter","e","setAll","selectors","getSelectors","reducer"],"sources":["/home/jenmaru/hexletproject/frontend-project-12/frontend/src/slices/Messages.js"],"sourcesContent":["import { createSlice, createEntityAdapter } from '@reduxjs/toolkit';\nimport { actions as channelsActions } from './Channels.js';\n\nconst messagesAdapter = createEntityAdapter();\nconst initialState = messagesAdapter.getInitialState();\n\nconst messages = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    addMessage: messagesAdapter.addOne,\n    addMessages: messagesAdapter.addMany,\n  },\n  extraReducers: (builder) => {\n    builder.addCase(channelsActions.removeChannel, (state, action) => {\n      const { channelId } = action.payload;\n      const update = Object.values(state.entities).filter((e) => e.channelId !== channelId);\n      messagesAdapter.setAll(state, update);\n    });\n  },\n});\n\nexport const { actions } = messages;\nexport const selectors = messagesAdapter.getSelectors((state) => state.messages);\nexport default messages.reducer;\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,mBAAmB,KAAQ,kBAAkB,CACnE,OAASC,OAAO,GAAI,CAAAC,eAAe,KAAQ,eAAe,CAE1D,KAAM,CAAAC,eAAe,CAAGH,mBAAmB,CAAC,CAAC,CAC7C,KAAM,CAAAI,YAAY,CAAGD,eAAe,CAACE,eAAe,CAAC,CAAC,CAEtD,KAAM,CAAAC,QAAQ,CAAGP,WAAW,CAAC,CAC3BQ,IAAI,CAAE,UAAU,CAChBH,YAAY,CACZI,QAAQ,CAAE,CACRC,UAAU,CAAEN,eAAe,CAACO,MAAM,CAClCC,WAAW,CAAER,eAAe,CAACS,OAC/B,CAAC,CACDC,aAAa,CAAGC,OAAO,EAAK,CAC1BA,OAAO,CAACC,OAAO,CAACb,eAAe,CAACc,aAAa,CAAE,CAACC,KAAK,CAAEC,MAAM,GAAK,CAChE,KAAM,CAAEC,SAAU,CAAC,CAAGD,MAAM,CAACE,OAAO,CACpC,KAAM,CAAAC,MAAM,CAAGC,MAAM,CAACC,MAAM,CAACN,KAAK,CAACO,QAAQ,CAAC,CAACC,MAAM,CAAEC,CAAC,EAAKA,CAAC,CAACP,SAAS,GAAKA,SAAS,CAAC,CACrFhB,eAAe,CAACwB,MAAM,CAACV,KAAK,CAAEI,MAAM,CAAC,CACvC,CAAC,CAAC,CACJ,CACF,CAAC,CAAC,CAEF,MAAO,MAAM,CAAEpB,OAAQ,CAAC,CAAGK,QAAQ,CACnC,MAAO,MAAM,CAAAsB,SAAS,CAAGzB,eAAe,CAAC0B,YAAY,CAAEZ,KAAK,EAAKA,KAAK,CAACX,QAAQ,CAAC,CAChF,cAAe,CAAAA,QAAQ,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}