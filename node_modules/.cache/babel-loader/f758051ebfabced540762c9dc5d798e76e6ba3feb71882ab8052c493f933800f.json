{"ast":null,"code":"import{createSlice,createEntityAdapter}from'@reduxjs/toolkit';const channelsAdapter=createEntityAdapter();const initialState=channelsAdapter.getInitialState({currentChannelId:1});const channelsSlice=createSlice({name:'channels',initialState,reducers:{addChannel:channelsAdapter.addOne,addChannels:channelsAdapter.addMany,removeChannel:channelsAdapter.removeOne,renameChannel:channelsAdapter.updateOne,setChannelId:(state,_ref)=>{let{payload}=_ref;return{...state,currentChannelId:payload};}}});const{actions}=channelsSlice;const selectors=channelsAdapter.getSelectors(state=>state.channels);const getCurrentChannel=state=>{const{currentChannelId}=state.channels;const channelsMass=Object.values(state.channels.entities);return channelsMass.find(channel=>channel.id===currentChannelId);};export{actions,selectors,getCurrentChannel};export default channelsSlice.reducer;","map":{"version":3,"names":["createSlice","createEntityAdapter","channelsAdapter","initialState","getInitialState","currentChannelId","channelsSlice","name","reducers","addChannel","addOne","addChannels","addMany","removeChannel","removeOne","renameChannel","updateOne","setChannelId","state","_ref","payload","actions","selectors","getSelectors","channels","getCurrentChannel","channelsMass","Object","values","entities","find","channel","id","reducer"],"sources":["/home/jenmaru/hexletproject/frontend-project-12/frontend/src/slices/Channels.js"],"sourcesContent":["import { createSlice, createEntityAdapter } from '@reduxjs/toolkit';\n\nconst channelsAdapter = createEntityAdapter();\nconst initialState = channelsAdapter.getInitialState({ currentChannelId: 1 });\n\nconst channelsSlice = createSlice({\n  name: 'channels',\n  initialState,\n  reducers: {\n    addChannel: channelsAdapter.addOne,\n    addChannels: channelsAdapter.addMany,\n    removeChannel: channelsAdapter.removeOne,\n    renameChannel: channelsAdapter.updateOne,\n    setChannelId: (state, { payload }) => ({ ...state, currentChannelId: payload }),\n  },\n});\n\nconst { actions } = channelsSlice;\nconst selectors = channelsAdapter.getSelectors((state) => state.channels);\nconst getCurrentChannel = (state) => {\n  const { currentChannelId } = state.channels;\n  const channelsMass = Object.values(state.channels.entities);\n  return channelsMass.find((channel) => channel.id === currentChannelId);\n};\nexport { actions, selectors, getCurrentChannel };\nexport default channelsSlice.reducer;\n"],"mappings":"AAAA,OAASA,WAAW,CAAEC,mBAAmB,KAAQ,kBAAkB,CAEnE,KAAM,CAAAC,eAAe,CAAGD,mBAAmB,CAAC,CAAC,CAC7C,KAAM,CAAAE,YAAY,CAAGD,eAAe,CAACE,eAAe,CAAC,CAAEC,gBAAgB,CAAE,CAAE,CAAC,CAAC,CAE7E,KAAM,CAAAC,aAAa,CAAGN,WAAW,CAAC,CAChCO,IAAI,CAAE,UAAU,CAChBJ,YAAY,CACZK,QAAQ,CAAE,CACRC,UAAU,CAAEP,eAAe,CAACQ,MAAM,CAClCC,WAAW,CAAET,eAAe,CAACU,OAAO,CACpCC,aAAa,CAAEX,eAAe,CAACY,SAAS,CACxCC,aAAa,CAAEb,eAAe,CAACc,SAAS,CACxCC,YAAY,CAAEA,CAACC,KAAK,CAAAC,IAAA,OAAE,CAAEC,OAAQ,CAAC,CAAAD,IAAA,OAAM,CAAE,GAAGD,KAAK,CAAEb,gBAAgB,CAAEe,OAAQ,CAAC,EAChF,CACF,CAAC,CAAC,CAEF,KAAM,CAAEC,OAAQ,CAAC,CAAGf,aAAa,CACjC,KAAM,CAAAgB,SAAS,CAAGpB,eAAe,CAACqB,YAAY,CAAEL,KAAK,EAAKA,KAAK,CAACM,QAAQ,CAAC,CACzE,KAAM,CAAAC,iBAAiB,CAAIP,KAAK,EAAK,CACnC,KAAM,CAAEb,gBAAiB,CAAC,CAAGa,KAAK,CAACM,QAAQ,CAC3C,KAAM,CAAAE,YAAY,CAAGC,MAAM,CAACC,MAAM,CAACV,KAAK,CAACM,QAAQ,CAACK,QAAQ,CAAC,CAC3D,MAAO,CAAAH,YAAY,CAACI,IAAI,CAAEC,OAAO,EAAKA,OAAO,CAACC,EAAE,GAAK3B,gBAAgB,CAAC,CACxE,CAAC,CACD,OAASgB,OAAO,CAAEC,SAAS,CAAEG,iBAAiB,EAC9C,cAAe,CAAAnB,aAAa,CAAC2B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}