{"ast":null,"code":"import { createSlice, createEntityAdapter } from '@reduxjs/toolkit';\nconst channelsAdapter = createEntityAdapter();\nconst initialState = channelsAdapter.getInitialState({\n  currentChannelId: 1\n});\nconst channels = createSlice({\n  name: 'channel',\n  initialState,\n  reducers: {\n    addChannel: channelsAdapter.addOne,\n    addChannels: channelsAdapter.addMany,\n    removeChannel: channelsAdapter.removeOne,\n    renameChannel: channelsAdapter.updateOne,\n    setChannelId: (state, {\n      payload\n    }) => ({\n      ...state,\n      ...payload\n    })\n  }\n});\nconst {\n  actions\n} = channels;\nconst selectors = channelsAdapter.getSelectors(state => state.channels);\nconst getCurrentChannel = state => {\n  const {\n    currentChannelId\n  } = state.channels;\n  const channels = Object.values(state.channels.entities);\n  return channels.find(channel => channel.id === currentChannelId);\n};\nexport { actions, selectors, getCurrentChannel };\nexport default channels.reducer;","map":{"version":3,"names":["createSlice","createEntityAdapter","channelsAdapter","initialState","getInitialState","currentChannelId","channels","name","reducers","addChannel","addOne","addChannels","addMany","removeChannel","removeOne","renameChannel","updateOne","setChannelId","state","payload","actions","selectors","getSelectors","getCurrentChannel","Object","values","entities","find","channel","id","reducer"],"sources":["/home/jenmaru/hexletproject/frontend-project-12/frontend/src/slices/Channels.js"],"sourcesContent":["import { createSlice, createEntityAdapter } from '@reduxjs/toolkit';\n\nconst channelsAdapter = createEntityAdapter();\nconst initialState = channelsAdapter.getInitialState({ currentChannelId: 1 });\nconst channels = createSlice({\n  name: 'channel',\n  initialState,\n  reducers: {\n    addChannel: channelsAdapter.addOne,\n    addChannels: channelsAdapter.addMany,\n    removeChannel: channelsAdapter.removeOne,\n    renameChannel: channelsAdapter.updateOne,\n    setChannelId: (state, { payload }) => ({\n      ...state,\n      ...payload,\n    }),\n  },\n});\n\nconst { actions } = channels;\nconst selectors = channelsAdapter.getSelectors((state) => state.channels);\nconst getCurrentChannel = (state) => {\n  const { currentChannelId } = state.channels;\n  const channels = Object.values(state.channels.entities);\n  return channels.find((channel) => channel.id === currentChannelId);\n};\nexport { actions, selectors, getCurrentChannel };\nexport default channels.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,mBAAmB,QAAQ,kBAAkB;AAEnE,MAAMC,eAAe,GAAGD,mBAAmB,CAAC,CAAC;AAC7C,MAAME,YAAY,GAAGD,eAAe,CAACE,eAAe,CAAC;EAAEC,gBAAgB,EAAE;AAAE,CAAC,CAAC;AAC7E,MAAMC,QAAQ,GAAGN,WAAW,CAAC;EAC3BO,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACRC,UAAU,EAAEP,eAAe,CAACQ,MAAM;IAClCC,WAAW,EAAET,eAAe,CAACU,OAAO;IACpCC,aAAa,EAAEX,eAAe,CAACY,SAAS;IACxCC,aAAa,EAAEb,eAAe,CAACc,SAAS;IACxCC,YAAY,EAAEA,CAACC,KAAK,EAAE;MAAEC;IAAQ,CAAC,MAAM;MACrC,GAAGD,KAAK;MACR,GAAGC;IACL,CAAC;EACH;AACF,CAAC,CAAC;AAEF,MAAM;EAAEC;AAAQ,CAAC,GAAGd,QAAQ;AAC5B,MAAMe,SAAS,GAAGnB,eAAe,CAACoB,YAAY,CAAEJ,KAAK,IAAKA,KAAK,CAACZ,QAAQ,CAAC;AACzE,MAAMiB,iBAAiB,GAAIL,KAAK,IAAK;EACnC,MAAM;IAAEb;EAAiB,CAAC,GAAGa,KAAK,CAACZ,QAAQ;EAC3C,MAAMA,QAAQ,GAAGkB,MAAM,CAACC,MAAM,CAACP,KAAK,CAACZ,QAAQ,CAACoB,QAAQ,CAAC;EACvD,OAAOpB,QAAQ,CAACqB,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAKxB,gBAAgB,CAAC;AACpE,CAAC;AACD,SAASe,OAAO,EAAEC,SAAS,EAAEE,iBAAiB;AAC9C,eAAejB,QAAQ,CAACwB,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}