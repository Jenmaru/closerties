{"ast":null,"code":"import { createSlice, createEntityAdapter } from '@reduxjs/toolkit';\nconst channelsAdapter = createEntityAdapter();\nconst initialState = channelsAdapter.getInitialState({\n  currentChannelId: 1\n});\nconst channelsSlice = createSlice({\n  name: 'channel',\n  initialState,\n  reducers: {\n    addChannel: channelsAdapter.addOne,\n    addChannels: channelsAdapter.addMany,\n    removeChannel: channelsAdapter.removeOne,\n    renameChannel: channelsAdapter.updateOne,\n    setChannelId: (state, {\n      payload\n    }) => ({\n      ...state,\n      cuurentChannelId: payload\n    })\n  }\n});\nconst {\n  actions\n} = channelsSlice;\nconst selectors = channelsAdapter.getSelectors(state => state.channels);\nconst getCurrentChannel = state => {\n  const {\n    currentChannelId\n  } = state.channels;\n  const channelsMass = Object.values(state.channels.entities);\n  return channelsMass.find(channel => channel.id === currentChannelId);\n};\nexport { actions, selectors, getCurrentChannel };\nexport default channelsSlice.reducer;","map":{"version":3,"names":["createSlice","createEntityAdapter","channelsAdapter","initialState","getInitialState","currentChannelId","channelsSlice","name","reducers","addChannel","addOne","addChannels","addMany","removeChannel","removeOne","renameChannel","updateOne","setChannelId","state","payload","cuurentChannelId","actions","selectors","getSelectors","channels","getCurrentChannel","channelsMass","Object","values","entities","find","channel","id","reducer"],"sources":["/home/jenmaru/hexletproject/frontend-project-12/frontend/src/slices/Channels.js"],"sourcesContent":["import { createSlice, createEntityAdapter } from '@reduxjs/toolkit';\n\nconst channelsAdapter = createEntityAdapter();\nconst initialState = channelsAdapter.getInitialState({ currentChannelId: 1 });\nconst channelsSlice = createSlice({\n  name: 'channel',\n  initialState,\n  reducers: {\n    addChannel: channelsAdapter.addOne,\n    addChannels: channelsAdapter.addMany,\n    removeChannel: channelsAdapter.removeOne,\n    renameChannel: channelsAdapter.updateOne,\n    setChannelId: (state, { payload }) => ({ ...state, cuurentChannelId: payload }),\n  },\n});\n\nconst { actions } = channelsSlice;\nconst selectors = channelsAdapter.getSelectors((state) => state.channels);\nconst getCurrentChannel = (state) => {\n  const { currentChannelId } = state.channels;\n  const channelsMass = Object.values(state.channels.entities);\n  return channelsMass.find((channel) => channel.id === currentChannelId);\n};\nexport { actions, selectors, getCurrentChannel };\nexport default channelsSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,mBAAmB,QAAQ,kBAAkB;AAEnE,MAAMC,eAAe,GAAGD,mBAAmB,CAAC,CAAC;AAC7C,MAAME,YAAY,GAAGD,eAAe,CAACE,eAAe,CAAC;EAAEC,gBAAgB,EAAE;AAAE,CAAC,CAAC;AAC7E,MAAMC,aAAa,GAAGN,WAAW,CAAC;EAChCO,IAAI,EAAE,SAAS;EACfJ,YAAY;EACZK,QAAQ,EAAE;IACRC,UAAU,EAAEP,eAAe,CAACQ,MAAM;IAClCC,WAAW,EAAET,eAAe,CAACU,OAAO;IACpCC,aAAa,EAAEX,eAAe,CAACY,SAAS;IACxCC,aAAa,EAAEb,eAAe,CAACc,SAAS;IACxCC,YAAY,EAAEA,CAACC,KAAK,EAAE;MAAEC;IAAQ,CAAC,MAAM;MAAE,GAAGD,KAAK;MAAEE,gBAAgB,EAAED;IAAQ,CAAC;EAChF;AACF,CAAC,CAAC;AAEF,MAAM;EAAEE;AAAQ,CAAC,GAAGf,aAAa;AACjC,MAAMgB,SAAS,GAAGpB,eAAe,CAACqB,YAAY,CAAEL,KAAK,IAAKA,KAAK,CAACM,QAAQ,CAAC;AACzE,MAAMC,iBAAiB,GAAIP,KAAK,IAAK;EACnC,MAAM;IAAEb;EAAiB,CAAC,GAAGa,KAAK,CAACM,QAAQ;EAC3C,MAAME,YAAY,GAAGC,MAAM,CAACC,MAAM,CAACV,KAAK,CAACM,QAAQ,CAACK,QAAQ,CAAC;EAC3D,OAAOH,YAAY,CAACI,IAAI,CAAEC,OAAO,IAAKA,OAAO,CAACC,EAAE,KAAK3B,gBAAgB,CAAC;AACxE,CAAC;AACD,SAASgB,OAAO,EAAEC,SAAS,EAAEG,iBAAiB;AAC9C,eAAenB,aAAa,CAAC2B,OAAO"},"metadata":{},"sourceType":"module","externalDependencies":[]}