{"ast":null,"code":"/**\n * LeoProfanity\n *\n * @constructor\n */\nvar LeoProfanity = {\n  /** @type {Object.<string, Array.string>} */\n  wordDictionary: {},\n  /** @type {Array.string} */\n  words: [],\n  /**\n   * Remove word from the list\n   *\n   * @private\n   * @param {string} str - word\n   */\n  removeWord: function (str) {\n    var index = this.words.indexOf(str);\n    if (index !== -1) {\n      this.words.splice(index, 1);\n    }\n    return this;\n  },\n  /**\n   * Add word into the list\n   *\n   * @private\n   * @param {string} str - word\n   */\n  addWord: function (str) {\n    if (this.words.indexOf(str) === -1) {\n      this.words.push(str);\n    }\n    return this;\n  },\n  /**\n   * Return replacement word from key\n   *\n   * @example\n   * // output: '***'\n   * getReplacementWord('*', 3)\n   *\n   * // output: '----'\n   * getReplacementWord('-', 4)\n   *\n   * @private\n   * @param {string} key\n   * @param {number} n\n   * @returns string\n   */\n  getReplacementWord: function (key, n) {\n    var i = 0;\n    var replacementWord = '';\n    for (i = 0; i < n; i++) {\n      replacementWord += key;\n    }\n    return replacementWord;\n  },\n  /**\n   * Sanitize string for this project\n   * 1. Convert to lower case\n   * 2. Replace comma and dot with space\n   *\n   * @private\n   * @param {string} str\n   * @returns {string}\n   */\n  sanitize: function (str) {\n    str = str.toLowerCase();\n    /* eslint-disable */\n    str = str.replace(/\\.|,/g, ' ');\n    return str;\n  },\n  /**\n   * Return all current profanity words\n   *\n   * @example\n   * filter.list();\n   * \n   * @public\n   * @returns {Array.string}\n   */\n  list: function () {\n    return this.words;\n  },\n  /**\n   * Check the string contain profanity words or not\n   * Approach, to make it fast ASAP.\n   * Check out more cases on \"clean\" method\n   * \n   * @example\n   * // output: true\n   * filter.check('I have boob');\n   *\n   * @see http://stackoverflow.com/questions/26425637/javascript-split-string-with-white-space\n   * @see http://stackoverflow.com/questions/6116474/how-to-find-if-an-array-contains-a-specific-string-in-javascript-jquery\n   * @see http://stackoverflow.com/questions/9141951/splitting-string-by-whitespace-without-empty-elements\n   * @public\n   * @param {string} str\n   * @returns {boolean}\n   */\n  check: function (str) {\n    if (!str) return false;\n    var i = 0;\n    var isFound = false;\n    str = this.sanitize(str);\n    // convert into array and remove white space\n    // add default returned value for some cases (e.g. \".\" will returns null)\n    var strs = str.match(/[^ ]+/g) || [];\n    while (!isFound && i <= this.words.length - 1) {\n      if (strs.includes(this.words[i])) isFound = true;\n      i++;\n    }\n    return isFound;\n  },\n  /**\n   * Internal proceeding method\n   *\n   * @todo improve algorithm\n   * @see http://stackoverflow.com/questions/26425637/javascript-split-string-with-white-space\n   * @private\n   * @param {string} str\n   * @param {string} [replaceKey=*] one character only\n   * @param {string} [nbLetters=0] number of ignoring letters from the beginning\n   * @returns {string}\n   */\n  proceed: function (str, replaceKey, nbLetters) {\n    if (!str) return '';\n    if (typeof replaceKey === 'undefined') replaceKey = '*';\n    if (typeof nbLetters === 'undefined') nbLetters = 0;\n    var self = this;\n    var originalString = str;\n    var result = str;\n    var sanitizedStr = self.sanitize(originalString);\n    // split by whitespace (keep delimiter)\n    // (cause comma and dot already replaced by whitespace)\n    var sanitizedArr = sanitizedStr.split(/(\\s)/);\n    // split by whitespace, comma and dot (keep delimiter)\n    var resultArr = result.split(/(\\s|,|\\.)/);\n\n    // loop through given string\n    var badWords = [];\n    sanitizedArr.forEach(function (item, index) {\n      if (self.words.includes(item)) {\n        var replacementWord = item.slice(0, nbLetters) + self.getReplacementWord(replaceKey, item.length - nbLetters);\n        badWords.push(resultArr[index]);\n        resultArr[index] = replacementWord;\n      }\n    });\n\n    // combine it\n    result = resultArr.join('');\n    return [result, badWords];\n  },\n  /**\n   * Replace profanity words\n   * \n   * @example\n   * // no bad word\n   * // output: I have 2 eyes\n   * filter.clean('I have 2 eyes');\n   * \n   * // normal case\n   * // output: I have ****, etc.\n   * filter.clean('I have boob, etc.');\n   * \n   * // case sensitive\n   * // output: I have ****\n   * filter.clean('I have BoOb');\n   * \n   * // separated by comma and dot\n   * // output: I have ****.\n   * filter.clean('I have BoOb.');\n   * \n   * // multi occurrence\n   * // output: I have ****,****, ***, and etc.\n   * filter.clean('I have boob,boob, ass, and etc.');\n   * \n   * // should not detect unspaced-word\n   * // output: Buy classic watches online\n   * filter.clean('Buy classic watches online');\n   * \n   * // clean with custom replacement-character\n   * // output: I have ++++\n   * filter.clean('I have boob', '+');\n   * \n   * // support \"clear letter\" in the beginning of the word\n   * // output: I have bo++\n   * filter.clean('I have boob', '+', 2);\n   * \n   * @public\n   * @param {string} str\n   * @param {string} [replaceKey=*] one character only\n   * @param {string} [nbLetters=0] number of ignoring letters from the beginning\n   * @returns {string}\n   */\n  clean: function (str, replaceKey, nbLetters) {\n    if (!str) return '';\n    if (typeof replaceKey === 'undefined') replaceKey = '*';\n    if (typeof nbLetters === 'undefined') nbLetters = 0;\n    return this.proceed(str, replaceKey, nbLetters)[0];\n  },\n  /**\n   * Get list of used bad/profanity words\n   * \n   * @example\n   * // should return original string if string not contain profanity word\n   * // output: []\n   * filter.badWordsUsed('I have 2 eyes')\n   * \n   * // should found profanity word\n   * // output: ['zoophilia']\n   * filter.badWordsUsed('lorem zoophilia ipsum')\n   * \n   * // should detect case sensitive\n   * // output: ['BoOb']\n   * filter.badWordsUsed('I have BoOb')\n   * \n   * // should detect multi occurrence\n   * // output: ['boob', 'boob', 'ass']\n   * filter.badWordsUsed('I have boob,boob, ass, and etc.')\n   * \n   * // should not detect unspaced-word\n   * // output: []\n   * filter.badWordsUsed('Buy classic watches online')\n   * \n   * // should detect multi-length-space and multi-space\n   * // output: ['BoOb']\n   * filter.badWordsUsed(',I h  a.   v e BoOb.')\n   *\n   * @public\n   * @param {string} str\n   * @returns {Array.string}\n   */\n  badWordsUsed: function (str) {\n    if (!str) return [];\n    return this.proceed(str, '*')[1];\n  },\n  /**\n   * Add word to the list\n   * \n   * @example\n   * // add word\n   * filter.add('b00b');\n   * \n   * // add word's array\n   * // check duplication automatically\n   * filter.add(['b00b', 'b@@b']);\n   * \n   * @public\n   * @param {string|Array.string} data\n   */\n  add: function (data) {\n    var self = this;\n    if (typeof data === 'string') {\n      self.addWord(data);\n    } else if (data.constructor === Array) {\n      data.forEach(function (word) {\n        self.addWord(word);\n      });\n    }\n    return this;\n  },\n  /**\n   * Remove word from the list\n   * \n   * @example\n   * // remove word\n   * filter.remove('b00b');\n   * \n   * // remove word's array\n   * filter.remove(['b00b', 'b@@b']);\n   *\n   * @public\n   * @param {string|Array.string} data\n   */\n  remove: function (data) {\n    var self = this;\n    if (typeof data === 'string') {\n      self.removeWord(data);\n    } else if (data.constructor === Array) {\n      data.forEach(function (word) {\n        self.removeWord(word);\n      });\n    }\n    return this;\n  },\n  /**\n   * Reset word list by using en dictionary\n   * (also remove word that manually add)\n   * \n   * @public\n   */\n  reset: function () {\n    this.loadDictionary('en');\n    return this;\n  },\n  /**\n   * Clear all words in the list\n   *\n   * @public\n   */\n  clearList: function () {\n    this.words = [];\n    return this;\n  },\n  /**\n   * Return word list from dictionary\n   *\n   * @example\n   * // returns words in en dictionary\n   * filter.getDictionary();\n   * \n   * // returns words in fr dictionary\n   * filter.getDictionary('fr');\n   * \n   * @public\n   * @param {string} [name=en] dictionary name\n   * @returns {Array.string}\n   */\n  getDictionary: function () {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';\n    name = name in this.wordDictionary ? name : 'en';\n    return this.wordDictionary[name];\n  },\n  /**\n   * Load word list from dictionary to using in the filter\n   *\n   * @example\n   * // replace current dictionary with the french one\n   * filter.loadDictionary('fr');\n   * \n   * // replace dictionary with the default one (same as filter.reset())\n   * filter.loadDictionary();\n   *\n   * @public\n   * @param {string} [name=en]\n   */\n  loadDictionary: function () {\n    let name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 'en';\n    // clone\n    this.words = JSON.parse(JSON.stringify(this.getDictionary(name)));\n  },\n  /**\n   * Add or create dictionary\n   *\n   * @example\n   * // create new dictionary\n   * filter.addDictionary('th', ['หนึ่ง', 'สอง', 'สาม', 'สี่', 'ห้า'])\n   *\n   * @public\n   * @param {string} name dictionary name\n   * @param {Array.string} words dictionary words\n   */\n  addDictionary: function (name, words) {\n    this.wordDictionary[name] = words;\n    this.loadDictionary(name);\n    return this;\n  },\n  /**\n   * Remove dictionary\n   *\n   * @example\n   * // remove dictionary\n   * filter.removeDictionary('th')\n   *\n   * @public\n   * @param {string} name dictionary name\n   */\n  removeDictionary: function (name) {\n    delete this.wordDictionary[name];\n    return this;\n  }\n};\nif (typeof module !== 'undefined' && module.exports != null) {\n  // constructor here\n  LeoProfanity.wordDictionary['en'] = require('../dictionary/default.json');\n\n  // try to import optional dictionaries\n  try {\n    LeoProfanity.wordDictionary['fr'] = require('french-badwords-list').array;\n  } catch (e) {}\n  try {\n    LeoProfanity.wordDictionary['ru'] = require('russian-bad-words').flatWords;\n  } catch (e) {}\n\n  /** @type {Array.string} */\n  LeoProfanity.words = JSON.parse(JSON.stringify(LeoProfanity.wordDictionary ? LeoProfanity.wordDictionary['en'] : []));\n  module.exports = LeoProfanity;\n  exports.default = LeoProfanity;\n}","map":{"version":3,"names":["LeoProfanity","wordDictionary","words","removeWord","str","index","indexOf","splice","addWord","push","getReplacementWord","key","n","i","replacementWord","sanitize","toLowerCase","replace","list","check","isFound","strs","match","length","includes","proceed","replaceKey","nbLetters","self","originalString","result","sanitizedStr","sanitizedArr","split","resultArr","badWords","forEach","item","slice","join","clean","badWordsUsed","add","data","constructor","Array","word","remove","reset","loadDictionary","clearList","getDictionary","name","arguments","undefined","JSON","parse","stringify","addDictionary","removeDictionary","module","exports","require","array","e","flatWords","default"],"sources":["/home/jenmaru/myProject/closerties/node_modules/leo-profanity/src/index.js"],"sourcesContent":["/**\n * LeoProfanity\n *\n * @constructor\n */\nvar LeoProfanity = {\n  /** @type {Object.<string, Array.string>} */\n  wordDictionary: {},\n\n  /** @type {Array.string} */\n  words: [],\n\n  /**\n   * Remove word from the list\n   *\n   * @private\n   * @param {string} str - word\n   */\n  removeWord: function (str) {\n    var index = this.words.indexOf(str);\n\n    if (index !== -1) {\n      this.words.splice(index, 1);\n    }\n\n    return this;\n  },\n\n  /**\n   * Add word into the list\n   *\n   * @private\n   * @param {string} str - word\n   */\n  addWord: function (str) {\n    if (this.words.indexOf(str) === -1) {\n      this.words.push(str);\n    }\n\n    return this;\n  },\n\n  /**\n   * Return replacement word from key\n   *\n   * @example\n   * // output: '***'\n   * getReplacementWord('*', 3)\n   *\n   * // output: '----'\n   * getReplacementWord('-', 4)\n   *\n   * @private\n   * @param {string} key\n   * @param {number} n\n   * @returns string\n   */\n  getReplacementWord: function (key, n) {\n    var i = 0;\n    var replacementWord = '';\n\n    for (i = 0; i < n; i++) {\n      replacementWord += key;\n    }\n\n    return replacementWord;\n  },\n\n  /**\n   * Sanitize string for this project\n   * 1. Convert to lower case\n   * 2. Replace comma and dot with space\n   *\n   * @private\n   * @param {string} str\n   * @returns {string}\n   */\n  sanitize: function (str) {\n    str = str.toLowerCase();\n    /* eslint-disable */\n    str = str.replace(/\\.|,/g, ' ');\n\n    return str;\n  },\n\n  /**\n   * Return all current profanity words\n   *\n   * @example\n   * filter.list();\n   * \n   * @public\n   * @returns {Array.string}\n   */\n  list: function () {\n    return this.words;\n  },\n\n  /**\n   * Check the string contain profanity words or not\n   * Approach, to make it fast ASAP.\n   * Check out more cases on \"clean\" method\n   * \n   * @example\n   * // output: true\n   * filter.check('I have boob');\n   *\n   * @see http://stackoverflow.com/questions/26425637/javascript-split-string-with-white-space\n   * @see http://stackoverflow.com/questions/6116474/how-to-find-if-an-array-contains-a-specific-string-in-javascript-jquery\n   * @see http://stackoverflow.com/questions/9141951/splitting-string-by-whitespace-without-empty-elements\n   * @public\n   * @param {string} str\n   * @returns {boolean}\n   */\n  check: function (str) {\n    if (!str) return false;\n\n    var i = 0;\n    var isFound = false;\n\n    str = this.sanitize(str);\n    // convert into array and remove white space\n    // add default returned value for some cases (e.g. \".\" will returns null)\n    var strs = str.match(/[^ ]+/g) || [];\n    while (!isFound && i <= this.words.length - 1) {\n      if (strs.includes(this.words[i])) isFound = true;\n      i++;\n    }\n\n    return isFound;\n  },\n\n  /**\n   * Internal proceeding method\n   *\n   * @todo improve algorithm\n   * @see http://stackoverflow.com/questions/26425637/javascript-split-string-with-white-space\n   * @private\n   * @param {string} str\n   * @param {string} [replaceKey=*] one character only\n   * @param {string} [nbLetters=0] number of ignoring letters from the beginning\n   * @returns {string}\n   */\n  proceed: function (str, replaceKey, nbLetters) {\n    if (!str) return '';\n    if (typeof replaceKey === 'undefined') replaceKey = '*';\n    if (typeof nbLetters === 'undefined') nbLetters = 0;\n\n    var self = this;\n    var originalString = str;\n    var result = str;\n\n    var sanitizedStr = self.sanitize(originalString);\n    // split by whitespace (keep delimiter)\n    // (cause comma and dot already replaced by whitespace)\n    var sanitizedArr = sanitizedStr.split(/(\\s)/);\n    // split by whitespace, comma and dot (keep delimiter)\n    var resultArr = result.split(/(\\s|,|\\.)/);\n\n    // loop through given string\n    var badWords = [];\n    sanitizedArr.forEach(function (item, index) {\n      if (self.words.includes(item)) {\n        var replacementWord = item.slice(0, nbLetters) + self.getReplacementWord(replaceKey, item.length - nbLetters);\n        badWords.push(resultArr[index]);\n        resultArr[index] = replacementWord;\n      }\n    });\n\n    // combine it\n    result = resultArr.join('');\n\n    return [result, badWords];\n  },\n\n  /**\n   * Replace profanity words\n   * \n   * @example\n   * // no bad word\n   * // output: I have 2 eyes\n   * filter.clean('I have 2 eyes');\n   * \n   * // normal case\n   * // output: I have ****, etc.\n   * filter.clean('I have boob, etc.');\n   * \n   * // case sensitive\n   * // output: I have ****\n   * filter.clean('I have BoOb');\n   * \n   * // separated by comma and dot\n   * // output: I have ****.\n   * filter.clean('I have BoOb.');\n   * \n   * // multi occurrence\n   * // output: I have ****,****, ***, and etc.\n   * filter.clean('I have boob,boob, ass, and etc.');\n   * \n   * // should not detect unspaced-word\n   * // output: Buy classic watches online\n   * filter.clean('Buy classic watches online');\n   * \n   * // clean with custom replacement-character\n   * // output: I have ++++\n   * filter.clean('I have boob', '+');\n   * \n   * // support \"clear letter\" in the beginning of the word\n   * // output: I have bo++\n   * filter.clean('I have boob', '+', 2);\n   * \n   * @public\n   * @param {string} str\n   * @param {string} [replaceKey=*] one character only\n   * @param {string} [nbLetters=0] number of ignoring letters from the beginning\n   * @returns {string}\n   */\n  clean: function (str, replaceKey, nbLetters) {\n    if (!str) return '';\n    if (typeof replaceKey === 'undefined') replaceKey = '*';\n    if (typeof nbLetters === 'undefined') nbLetters = 0;\n    return this.proceed(str, replaceKey, nbLetters)[0];\n  },\n\n  /**\n   * Get list of used bad/profanity words\n   * \n   * @example\n   * // should return original string if string not contain profanity word\n   * // output: []\n   * filter.badWordsUsed('I have 2 eyes')\n   * \n   * // should found profanity word\n   * // output: ['zoophilia']\n   * filter.badWordsUsed('lorem zoophilia ipsum')\n   * \n   * // should detect case sensitive\n   * // output: ['BoOb']\n   * filter.badWordsUsed('I have BoOb')\n   * \n   * // should detect multi occurrence\n   * // output: ['boob', 'boob', 'ass']\n   * filter.badWordsUsed('I have boob,boob, ass, and etc.')\n   * \n   * // should not detect unspaced-word\n   * // output: []\n   * filter.badWordsUsed('Buy classic watches online')\n   * \n   * // should detect multi-length-space and multi-space\n   * // output: ['BoOb']\n   * filter.badWordsUsed(',I h  a.   v e BoOb.')\n   *\n   * @public\n   * @param {string} str\n   * @returns {Array.string}\n   */\n  badWordsUsed: function (str) {\n    if (!str) return [];\n    return this.proceed(str, '*')[1];\n  },\n\n  /**\n   * Add word to the list\n   * \n   * @example\n   * // add word\n   * filter.add('b00b');\n   * \n   * // add word's array\n   * // check duplication automatically\n   * filter.add(['b00b', 'b@@b']);\n   * \n   * @public\n   * @param {string|Array.string} data\n   */\n  add: function (data) {\n    var self = this;\n\n    if (typeof data === 'string') {\n      self.addWord(data);\n    } else if (data.constructor === Array) {\n      data.forEach(function (word) {\n        self.addWord(word);\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Remove word from the list\n   * \n   * @example\n   * // remove word\n   * filter.remove('b00b');\n   * \n   * // remove word's array\n   * filter.remove(['b00b', 'b@@b']);\n   *\n   * @public\n   * @param {string|Array.string} data\n   */\n  remove: function (data) {\n    var self = this;\n\n    if (typeof data === 'string') {\n      self.removeWord(data);\n    } else if (data.constructor === Array) {\n      data.forEach(function (word) {\n        self.removeWord(word);\n      });\n    }\n\n    return this;\n  },\n\n  /**\n   * Reset word list by using en dictionary\n   * (also remove word that manually add)\n   * \n   * @public\n   */\n  reset: function () {\n    this.loadDictionary('en');\n    return this;\n  },\n\n  /**\n   * Clear all words in the list\n   *\n   * @public\n   */\n  clearList: function () {\n    this.words = [];\n\n    return this;\n  },\n\n  /**\n   * Return word list from dictionary\n   *\n   * @example\n   * // returns words in en dictionary\n   * filter.getDictionary();\n   * \n   * // returns words in fr dictionary\n   * filter.getDictionary('fr');\n   * \n   * @public\n   * @param {string} [name=en] dictionary name\n   * @returns {Array.string}\n   */\n  getDictionary: function (name = 'en') {\n    name = (name in this.wordDictionary) ? name : 'en';\n    return this.wordDictionary[name]\n  },\n\n  /**\n   * Load word list from dictionary to using in the filter\n   *\n   * @example\n   * // replace current dictionary with the french one\n   * filter.loadDictionary('fr');\n   * \n   * // replace dictionary with the default one (same as filter.reset())\n   * filter.loadDictionary();\n   *\n   * @public\n   * @param {string} [name=en]\n   */\n  loadDictionary: function (name = 'en') {\n    // clone\n    this.words = JSON.parse(JSON.stringify(this.getDictionary(name)))\n  },\n\n  /**\n   * Add or create dictionary\n   *\n   * @example\n   * // create new dictionary\n   * filter.addDictionary('th', ['หนึ่ง', 'สอง', 'สาม', 'สี่', 'ห้า'])\n   *\n   * @public\n   * @param {string} name dictionary name\n   * @param {Array.string} words dictionary words\n   */\n  addDictionary: function (name, words) {\n    this.wordDictionary[name] = words\n    this.loadDictionary(name)\n\n    return this;\n  },\n\n  /**\n   * Remove dictionary\n   *\n   * @example\n   * // remove dictionary\n   * filter.removeDictionary('th')\n   *\n   * @public\n   * @param {string} name dictionary name\n   */\n   removeDictionary: function (name) {\n    delete this.wordDictionary[name]\n\n    return this;\n  },\n};\n\nif (typeof module !== 'undefined' && module.exports != null) {\n  // constructor here\n  LeoProfanity.wordDictionary['en'] = require('../dictionary/default.json');\n\n  // try to import optional dictionaries\n  try { LeoProfanity.wordDictionary['fr'] = require('french-badwords-list').array; } catch (e) {}\n  try { LeoProfanity.wordDictionary['ru'] = require('russian-bad-words').flatWords; } catch (e) {}\n\n  /** @type {Array.string} */\n  LeoProfanity.words = JSON.parse(JSON.stringify(LeoProfanity.wordDictionary ? LeoProfanity.wordDictionary['en'] : []));\n\n  module.exports = LeoProfanity\n  exports.default = LeoProfanity\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}