{"version":3,"file":"useRollbarContext.js","sources":["../src/hooks/use-rollbar-context.js"],"sourcesContent":["import invariant from 'tiny-invariant';\nimport { useEffect, useLayoutEffect } from 'react';\nimport { useRollbar } from './use-rollbar';\n\n// Simple version does its job\n// export function useRollbarContext(context) {\n//   useRollbarConfiguration({ payload: { context }});\n// }\n\n// Complex version will set the context when part of the tree and reset back to original context when removed\nexport function useRollbarContext(ctx = '', isLayout = false) {\n  invariant(typeof ctx === 'string', '`ctx` must be a string');\n  const rollbar = useRollbar();\n  (isLayout ? useLayoutEffect : useEffect)(() => {\n    const origCtx = rollbar.options.payload.context;\n    rollbar.configure({ payload: { context: ctx }});\n    return () => {\n      rollbar.configure({ payload: { context: origCtx }});\n    };\n  }, [ctx]);\n}\n"],"names":["useRollbarContext","ctx","isLayout","invariant","rollbar","useRollbar","useLayoutEffect","useEffect","origCtx","options","payload","context","configure"],"mappings":";;;;;;;;;;;;;AAKA;AACA;AACA;AAEA;;AACO,SAASA,iBAAT,GAAuD;AAAA,MAA5BC,GAA4B,uEAAtB,EAAsB;AAAA,MAAlBC,QAAkB,uEAAP,KAAO;AAC5DC,EAAAA,2BAAS,CAAC,OAAOF,GAAP,KAAe,QAAhB,EAA0B,wBAA1B,CAAT;AACA,MAAMG,OAAO,GAAGC,qBAAU,EAA1B;AACA,GAACH,QAAQ,GAAGI,qBAAH,GAAqBC,eAA9B,EAAyC,YAAM;AAC7C,QAAMC,OAAO,GAAGJ,OAAO,CAACK,OAAR,CAAgBC,OAAhB,CAAwBC,OAAxC;AACAP,IAAAA,OAAO,CAACQ,SAAR,CAAkB;AAAEF,MAAAA,OAAO,EAAE;AAAEC,QAAAA,OAAO,EAAEV;AAAX;AAAX,KAAlB;AACA,WAAO,YAAM;AACXG,MAAAA,OAAO,CAACQ,SAAR,CAAkB;AAAEF,QAAAA,OAAO,EAAE;AAAEC,UAAAA,OAAO,EAAEH;AAAX;AAAX,OAAlB;AACD,KAFD;AAGD,GAND,EAMG,CAACP,GAAD,CANH;AAOD;;;;"}